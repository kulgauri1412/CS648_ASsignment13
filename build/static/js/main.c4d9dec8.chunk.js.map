{"version":3,"sources":["Filters.js","ProductRow.js","ProductTable.js","ProductForm.js","Products.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","handleChange","bind","e","value","target","name","this","onFilter","type","className","placeholder","onChange","Component","ProductRow","destroy","modify","onDestroy","product","productid","onModify","category","price","instock","onClick","ProductTable","handleDestroy","handleModify","id","productsArray","Object","keys","products","map","pid","rows","forEach","indexOf","filterText","push","key","RESET_VALUES","ProductForm","handleSave","fillForm","handleOptionChange","state","action","assign","errors","selectedOption","changeEvent","setState","option","prevState","productToModify","onSave","onUpdate","preventDefault","checked","PRODUCTS","Products","handleFilter","handleUpdate","populateForm","child","React","createRef","fetch","then","data","json","filterInput","Date","getTime","method","headers","Accept","body","JSON","stringify","response","console","log","catch","error","productId","productToUpdate","current","updatedProduct","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4d9dec8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Filters extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e) {\n        const value = e.target.value\n        const name = e.target.name\n\n        this.props.onFilter({\n            [name]: value\n        })\n    }\n\n    render () {\n        return (\n            <form>\n                <input \n                    type=\"text\" \n                    className=\"form-control\" \n                    placeholder=\"Search...\" \n                    name=\"filterText\" \n                    onChange={this.handleChange}></input>\n            </form>\n        )\n    }\n}\n\nexport default Filters","import React, { Component } from 'react'\n\nclass ProductRow extends Component {\n    constructor(props) {\n        super(props)\n        this.destroy = this.destroy.bind(this)\n        this.modify = this.modify.bind(this)\n    }\n    destroy() {\n        this.props.onDestroy(this.props.product.productid);\n    }\n    modify() {\n        this.props.onModify(this.props.product.productid);\n    }\n    render () {\n        return (\n            <tr>\n                <td>{this.props.product.name}</td>\n                <td>{this.props.product.category}</td>\n                <td>{this.props.product.price}</td>\n                <td>{this.props.product.instock === true ? 'In Stock' : 'Out Of Stock'}</td>\n                <td className=\"text-right\"><button onClick={this.modify} className=\"btn btn-info\">Modify</button></td>\n                <td className=\"text-right\"><button onClick={this.destroy} className=\"btn btn-info\">Delete</button></td>\n            </tr>\n        )\n    }\n}\n\nexport default ProductRow","import React, { Component } from 'react'\nimport ProductRow from './ProductRow'\n\nclass ProductTable extends Component {\n    constructor(props) {\n        super(props)\n        this.handleDestroy = this.handleDestroy.bind(this)\n        this.handleModify = this.handleModify.bind(this)\n    }\n\n    handleDestroy(id) {\n        this.props.onDestroy(id)\n    }\n    handleModify(id) {\n        this.props.onModify(id)\n    }   \n    render () {\n        let productsArray = Object.keys(this.props.products).map((pid) => this.props.products[pid])\n        let rows = []\n\n        productsArray.forEach((product) => {\n            if (product.name.indexOf(this.props.filterText) === -1) {\n                return\n            }\n            rows.push (\n                <ProductRow \n                    product={product} \n                    key={product.productid} \n                    onDestroy={this.handleDestroy}\n                    onModify={this.handleModify}>\n\n                </ProductRow>\n            )\n        })\n        return (\n            <div>\n                <table className=\"table table-striped table-sm\">\n                    <thead className=\"thead-dark\">\n                        <tr>\n                            <th>Name</th>\n                            <th>Category</th>\n                            <th>Price</th>\n                            <th>Stock Status</th>\n                            <th></th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default ProductTable","import React, { Component } from 'react'\n\nconst RESET_VALUES = {productid: '', category: '', price: '', name: ''}\n\nclass ProductForm extends Component {\n    constructor(props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSave = this.handleSave.bind(this)\n        this.fillForm = this.fillForm.bind(this)\n        this.handleOptionChange = this.handleOptionChange.bind(this)\n        this.state = {\n            action:\"Save\",\n            product: Object.assign({}, RESET_VALUES),\n            errors: {},\n            selectedOption:\"In Stock\"\n        }\n    }\n\n    handleOptionChange(changeEvent) {\n        this.setState({\n            selectedOption: changeEvent.target.value\n          });\n        var option = changeEvent.target.value;\n        this.setState((prevState) => {\n            if(option === \"In Stock\"){\n                prevState.product.instock = true;\n            }\n            else{\n                prevState.product.instock = false;\n            }\n            return { product: prevState.product }\n        })\n    }\n\n    fillForm(productToModify) {\n        this.setState({product : productToModify, action:\"Update\"});\n    }\n        \n    handleChange(e) {\n        const target = e.target\n        const value = target.value\n        const name = target.name\n        this.setState((prevState) => {\n            prevState.product[name] = value\n            return { product: prevState.product }\n        })\n    }\n    handleSave(e) {\n\n        if(this.state.action === \"Save\") {\n            this.props.onSave(this.state.product);\n        }\n        else if(this.state.action === \"Update\") {\n            this.props.onUpdate(this.state.product)\n        }\n        this.setState({\n            product: Object.assign({}, RESET_VALUES), \n            errors: {},\n            action:\"Save\"\n        })\n\n        e.preventDefault()\n    }\n\n    render () {\n        return (\n            <form>\n                <h4>Add a new product</h4>\n                <p>\n                    <label>Name: <br/> \n                    <input type=\"text\" className=\"form-control\" name=\"name\" onChange={this.handleChange} value={this.state.product.name} /></label>\n                </p>\n                <p>\n                    <label>Category: <br/> \n                    <input type=\"text\" className=\"form-control\" name=\"category\" onChange={this.handleChange} value={this.state.product.category} /></label>\n                </p>\n                <p>\n                    <label>Price: <br/> \n                    <input type=\"text\" className=\"form-control\" name=\"price\" onChange={this.handleChange} value={this.state.product.price} /></label>\n                </p>\n\n                <div className=\"form-check\">\n                    <input className=\"form-check-input\" type=\"radio\" value=\"In Stock\" checked={this.state.product.instock === true} onChange={this.handleOptionChange}/>\n                    <label className=\"form-check-label\">In Stock</label>\n                      \n                </div>\n                <div className=\"form-check\">\n                    <input className=\"form-check-input\" type=\"radio\" value=\"Out Of Stock\" checked={this.state.product.instock === false} onChange={this.handleOptionChange}/>\n                    <label className=\"form-check-label\">Out Of Stock</label>\n                </div>\n                <br/>\n\n                <input type=\"submit\" className=\"btn btn-info\" value={this.state.action} onClick={this.handleSave}></input>\n            </form>\n        )\n    }\n}\n\nexport default ProductForm","import React, { Component } from 'react'\nimport Filters from './Filters'\nimport ProductTable from './ProductTable'\nimport ProductForm from './ProductForm'\n\nlet PRODUCTS = {};\n\nclass Products extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            filterText: '',\n            products: PRODUCTS\n        }\n        this.handleFilter = this.handleFilter.bind(this)\n        this.handleDestroy = this.handleDestroy.bind(this)\n        this.handleSave = this.handleSave.bind(this)\n        this.handleUpdate = this.handleUpdate.bind(this)\n        this.populateForm = this.populateForm.bind(this)\n        this.child = React.createRef();\n    }\n    componentDidMount(){\n        fetch(`/product/get`)\n        .then(data => data.json())\n        .then(data => this.setState({products:data}))\n    }\n\n    handleFilter(filterInput) {\n        this.setState(filterInput)\n    }\n\n    handleSave(product) {\n\n        product.productid = new Date().getTime()\n        product.instock = true;\n        this.setState((prevState) => {\n            let products = prevState.products\n            products[product.productid] = product\n            return { products }\n        })\n\n        var data = {'product' : product, 'id': product.productid}\n        fetch('/product/create',{\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                        'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n            console.log(response)\n        })\n        .catch(error =>{\n            console.log(error)\n        })\n    }\n\n    handleDestroy(productId) {\n\n        this.setState((prevState) => {\n            let products = prevState.products\n            delete products[productId]\n            return { products }\n        });\n\n\n        fetch(`/product/delete/${productId}`,{\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                        'Content-Type': 'application/json',\n            }\n        }).then(response => {\n            console.log(response)\n        })\n        .catch(error =>{\n            console.log(error)\n        })\n    }\n\n    populateForm(productId) {\n        console.log(\"Update this \"+productId)\n        let productToUpdate = this.state.products[productId]\n        this.child.current.fillForm(productToUpdate);\n    }\n\n    handleUpdate(updatedProduct) {\n        console.log(\"Updated\")\n        console.log(updatedProduct)\n        this.setState((prevState) => {\n            let products = prevState.products\n            products[updatedProduct.productid] = updatedProduct\n            return { products }\n        });\n\n        var productId = updatedProduct.productid;\n        var data = {'product' : updatedProduct, 'id': productId}\n        fetch(`/product/update/${productId}`,{\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                        'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n            console.log(response)\n        })\n        .catch(error =>{\n            console.log(error)\n        })\n    }\n\n    render () {\n        return (\n            <div>\n                <h1>My Inventory</h1>\n                <Filters \n                    onFilter={this.handleFilter}></Filters>\n                <ProductTable \n                    products={this.state.products}\n                    filterText={this.state.filterText}\n                    onDestroy={this.handleDestroy}\n                    onModify={this.populateForm}\n                    onUpdate={this.handleUpdate}>\n\n                </ProductTable>\n                <ProductForm\n                    onUpdate={this.handleUpdate}\n                    onSave={this.handleSave}\n                    ref={this.child}></ProductForm>\n            </div>\n        )\n    }\n}\n\nexport default Products","import React from 'react';\nimport Products from './Products'\nfunction App() {\n  return (\n    <div>\n      <Products></Products>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}